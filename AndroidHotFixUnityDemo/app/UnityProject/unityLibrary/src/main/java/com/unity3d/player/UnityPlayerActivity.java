// GENERATED BY UNITY. REMOVE THIS COMMENT TO PREVENT OVERWRITING WHEN EXPORTING AGAIN
package com.unity3d.player;

import android.app.Activity;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.os.Bundle;
import android.os.Vibrator;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.Window;
import android.os.Process;
public class UnityPlayerActivity extends Activity implements IUnityPlayerLifecycleEvents
{
    protected UnityPlayer mUnityPlayer; // don't change the name of this variable; referenced from native code

    public Context MainContext;
    // Override this in your custom UnityPlayerActivity to tweak the command line arguments passed to the Unity Android Player
    // The command line arguments are passed as a string, separated by spaces
    // UnityPlayerActivity calls this from 'onCreate'
    // Supported: -force-gles20, -force-gles30, -force-gles31, -force-gles31aep, -force-gles32, -force-gles, -force-vulkan
    // See https://docs.unity3d.com/Manual/CommandLineArguments.html
    // @param cmdLine the current command line arguments, may be null
    // @return the modified command line string or null
    protected String updateUnityCommandLineArguments(String cmdLine)
    {
        return cmdLine;
    }

    // Setup activity layout
    @Override protected void onCreate(Bundle savedInstanceState)
    {
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        super.onCreate(savedInstanceState);

        String cmdLine = updateUnityCommandLineArguments(getIntent().getStringExtra("unity"));
        getIntent().putExtra("unity", cmdLine);

        mUnityPlayer = new UnityPlayer(this, this);
        setContentView(mUnityPlayer);
        mUnityPlayer.requestFocus();
//http://120.78.143.78:10000/download/unity/
        //http://149.129.131.148:10000/download/unity/
        String info="{\"gameId\": \"matchbattle\",\"updateUrl\": \"http://192.168.2.20:8888/\",\"gameInitInfo\": {\"RandomSeed\": 8856,\"Difficulty\": 5},\"gameName\": \"matchbattle\",\"matchInfo\": {\"LeftTime\": 180,\"Token\": \"hzafgktuymcrepxobjwldvqisn\"}}";
        UnityPlayer.UnitySendMessage("BuTongSdk","setStartGameUploadCompelte",info);
    }

    // When Unity player unloaded move task to background
    @Override public void onUnityPlayerUnloaded() {
        moveTaskToBack(true);
    }

    // When Unity player quited kill process
    @Override public void onUnityPlayerQuitted() {
        Process.killProcess(Process.myPid());
    }

    @Override protected void onNewIntent(Intent intent)
    {
        // To support deep linking, we need to make sure that the client can get access to
        // the last sent intent. The clients access this through a JNI api that allows them
        // to get the intent set on launch. To update that after launch we have to manually
        // replace the intent with the one caught here.
        setIntent(intent);
        mUnityPlayer.newIntent(intent);
    }

    // Quit Unity
    @Override protected void onDestroy ()
    {
        mUnityPlayer.destroy();
        super.onDestroy();
    }

    // Pause Unity
    @Override protected void onPause()
    {
        super.onPause();
        mUnityPlayer.pause();
    }

    // Resume Unity
    @Override protected void onResume()
    {
        super.onResume();
        mUnityPlayer.resume();
    }

    // Low Memory Unity
    @Override public void onLowMemory()
    {
        super.onLowMemory();
        mUnityPlayer.lowMemory();
    }

    // Trim Memory Unity
    @Override public void onTrimMemory(int level)
    {
        super.onTrimMemory(level);
        if (level == TRIM_MEMORY_RUNNING_CRITICAL)
        {
            mUnityPlayer.lowMemory();
        }
    }

    // This ensures the layout will be correct.
    @Override public void onConfigurationChanged(Configuration newConfig)
    {
        super.onConfigurationChanged(newConfig);
        mUnityPlayer.configurationChanged(newConfig);
    }

    // Notify Unity of the focus change.
    @Override public void onWindowFocusChanged(boolean hasFocus)
    {
        super.onWindowFocusChanged(hasFocus);
        mUnityPlayer.windowFocusChanged(hasFocus);
    }

    // For some reason the multiple keyevent type is not supported by the ndk.
    // Force event injection by overriding dispatchKeyEvent().
    @Override public boolean dispatchKeyEvent(KeyEvent event)
    {
        if (event.getAction() == KeyEvent.ACTION_MULTIPLE)
            return mUnityPlayer.injectEvent(event);
        return super.dispatchKeyEvent(event);
    }

    // Pass any events not handled by (unfocused) views straight to UnityPlayer
    @Override public boolean onKeyUp(int keyCode, KeyEvent event)     { return mUnityPlayer.injectEvent(event); }
    @Override public boolean onKeyDown(int keyCode, KeyEvent event)   { return mUnityPlayer.injectEvent(event); }
    @Override public boolean onTouchEvent(MotionEvent event)          { return mUnityPlayer.injectEvent(event); }
    /*API12*/ public boolean onGenericMotionEvent(MotionEvent event)  { return mUnityPlayer.injectEvent(event); }

    ////////////////////////////////////////////////////////////////////////////////Unity调原生////////////////////////////////////////////////////////////////////////////////////
    /**
     * 震动
     * @param type 0 轻度， 1 重度
     */
    public void StartShock(int type){
        Vibrator  vibrator = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);
        long [] pattern = new long[] {0, 40};   // 停止 开启 停止 开启
        if(type == 1)
        {
            pattern = new long[] {0, 80, 0, 80};
        }
        vibrator.vibrate(pattern, -1);
    }

    public  void shockByCustom(String data){
        Vibrator  vibrator = (Vibrator) this.getSystemService(Context.VIBRATOR_SERVICE);
        String[] shockData=data.split("#");
        long [] pattern = new long[shockData.length];
        for(int i=0;i<shockData.length;i++){
            pattern[i]=Long.parseLong(shockData[i]);
        }
        vibrator.vibrate(pattern,-1);
    }

    public void hideSplash(){
        System.out.println(">>>>>>hides>>>>>>");
        this.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                //sSplashBgImageView.setVisibility(View.GONE);
            }
        });
    }

    public void sendMessageToPlatform(String action,String data){
        if(action.equals("uploadResult")){
            Intent intent=new Intent();
            intent.setComponent(new ComponentName("com.ming.androidhotfixunitytest",
                    "com.ming.androidhotfixunitytest.MainActivity"));
            startActivity(intent);
            finish();
        }
    }
}
